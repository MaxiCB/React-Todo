{"version":3,"sources":["components/TodoComponents/Todo.js","components/TodoComponents/TodoList.js","components/TodoComponents/TodoForm.js","App.js","index.js"],"names":["Todo","props","toggleComplete","status","ListGroupItem","active","ListGroupItemHeading","task","ListGroupItemText","Button","onClick","e","id","TodoList","tasks","ListGroup","map","TodoForm","addTodo","removeComplete","input","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","target","value","console","log","setInput","color","todo","newTask","Date","now","undefined","taskManager","remove","clearComplete","App","state","setState","localStorage","setItem","JSON","stringify","removeTodo","filter","item","find","element","local","getItem","parse","this","React","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c0c7946.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Button\n} from \"reactstrap\";\n\nconst Todo = props => {\n\n  const toggleComplete = props.toggleComplete;\n  \nif(props.status === true) {\n    return (\n        <ListGroupItem active>\n          <ListGroupItemHeading>{\"Task: \" + props.task}</ListGroupItemHeading>\n          <ListGroupItemText>{\"Task Status: \" + props.status}</ListGroupItemText>\n          <Button onClick={(e) => toggleComplete(props.id)}>Mark Incomplete</Button>\n        </ListGroupItem>\n    );\n} else {\n    return (\n        <ListGroupItem>\n          <ListGroupItemHeading>{\"Task: \" + props.task}</ListGroupItemHeading>\n          <ListGroupItemText>{\"Task Status: \" + props.status}</ListGroupItemText>\n          <Button onClick={(e) => toggleComplete(props.id)}>Mark Complete</Button>\n        </ListGroupItem>\n    );\n}\n};\n\nexport default Todo;\n","import React from \"react\";\nimport {\n  ListGroup\n} from \"reactstrap\";\n\nimport Todo from './Todo';\n\nconst TodoList = props => {\n  const tasks = props.tasks;\n  const toggleComplete = props.toggleComplete;\n\n  return (\n    <div>\n      <ListGroup>\n        {tasks.map((task) => {\n            return <Todo {...task} toggleComplete={toggleComplete}/>\n        })}\n      </ListGroup>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport {\n    InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Input,\n  Button\n} from \"reactstrap\";\n\nconst TodoForm = props => {\n\n  const addTodo = props.addTodo;\n  const removeComplete = props.removeComplete;\n\n    let input = '';\n\n    const setInput = (e) => {\n        input = e.target.value;\n        console.log(input);\n    }\n\n    const taskManager = (task) => {\n        let todo = addTodo;\n        let newTask = {task: task, status: false, id: Date.now()};\n        if(task !== '' && task !== undefined) {\n            console.log(newTask);\n            todo(newTask);\n        } else {\n            console.log('Invalid task')\n        }\n    }\n\n    const clearComplete = () => {\n        let remove = removeComplete;\n        console.log('form');\n        remove();\n    }\n\n  return (\n    <InputGroup>\n    <InputGroupAddon addonType=\"prepend\">\n      <InputGroupText>Task</InputGroupText>\n    </InputGroupAddon>\n    <Input onChange={(e) => setInput(e)}/>\n    <InputGroupAddon addonType=\"append\">\n      <Button color=\"primary\" onClick={(e) => taskManager(input)}>Add!</Button>\n    </InputGroupAddon>\n    <InputGroupAddon addonType=\"append\">\n      <Button color=\"secondary\" onClick={(e) => clearComplete()}>Clear Complete</Button>\n    </InputGroupAddon>\n  </InputGroup>\n  );\n};\n\nexport default TodoForm;","import React from 'react';\n\nimport TodoList from './components/TodoComponents/TodoList';\nimport TodoForm from './components/TodoComponents/TodoForm';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      tasks: []\n    }\n  }\n\n  componentDidMount() {\n    const local = localStorage.getItem('tasks');\n    console.log(JSON.parse(local));\n    const tasks = JSON.parse(local);\n    this.setState({tasks})\n  }\n\n  addTodo = (todo) => {\n    console.log(todo);\n    console.log(this.state.tasks);\n    this.setState(state => {\n      const tasks = [...state.tasks, todo];\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return {\n        tasks\n      }\n    })\n  };\n\n  removeTodo = (id) => {\n    this.setState(state => {\n      const tasks = state.tasks.filter(item => item.id === id);\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return {\n        tasks,\n      }\n    })\n  }\n\n  toggleComplete = (id) => {\n    this.setState(state => {\n      const tasks = [...state.tasks];\n      const task = tasks.find(element => element.id === id);\n      if(task !== undefined) {\n        task.status = !task.status;\n      }\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return {\n        tasks\n      }\n    })\n  }\n\n  removeComplete = () => {\n    this.setState(state => {\n      const tasks = state.tasks.filter(item => item.status !== true);\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return {\n        tasks,\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <TodoList tasks={this.state.tasks} removeTodo={this.removeTodo} toggleComplete={this.toggleComplete}/>\n        <TodoForm addTodo={this.addTodo} removeComplete={this.removeComplete}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}